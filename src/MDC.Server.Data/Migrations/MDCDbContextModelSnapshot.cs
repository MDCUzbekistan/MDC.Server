// <auto-generated />
using System;
using MDC.Server.Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MDC.Server.Data.Migrations
{
    [DbContext(typeof(MDCDbContext))]
    partial class MDCDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MDC.Server.Domain.Entities.Communities.Community", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Banner")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Communities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Banner = "tech_banner.jpg",
                            Bio = "Explore the latest in tech trends.",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5360),
                            Description = "A community for technology enthusiasts.",
                            Logo = "tech_logo.png",
                            Title = "Tech Enthusiasts"
                        },
                        new
                        {
                            Id = 2L,
                            Banner = "outdoor_banner.jpg",
                            Bio = "Connect with nature and fellow adventurers.",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5364),
                            Description = "For those who love outdoor activities.",
                            Logo = "outdoor_logo.png",
                            Title = "Outdoor Adventures"
                        },
                        new
                        {
                            Id = 3L,
                            Banner = "books_banner.jpg",
                            Bio = "Discuss your favorite books and discover new ones.",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5367),
                            Description = "A community for bookworms and literature enthusiasts.",
                            Logo = "books_logo.png",
                            Title = "Book Lovers Club"
                        },
                        new
                        {
                            Id = 4L,
                            Banner = "fitness_banner.jpg",
                            Bio = "Share workout tips and stay motivated.",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5370),
                            Description = "For fitness enthusiasts and health-conscious individuals.",
                            Logo = "fitness_logo.png",
                            Title = "Fitness Fanatics"
                        },
                        new
                        {
                            Id = 5L,
                            Banner = "art_banner.jpg",
                            Bio = "Connect with fellow artists and creators.",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5373),
                            Description = "Explore and share your artistic side.",
                            Logo = "art_logo.png",
                            Title = "Art and Creativity"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Communities.CommunityRole", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CommunityRoles");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5433),
                            Description = "Community administrator role.",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = (short)2,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5437),
                            Description = "Standard community member role.",
                            Name = "Member"
                        },
                        new
                        {
                            Id = (short)3,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5439),
                            Description = "Community moderator role.",
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = (short)4,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5441),
                            Description = "Guest role for limited access.",
                            Name = "Guest"
                        },
                        new
                        {
                            Id = (short)5,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5443),
                            Description = "Community content editor role.",
                            Name = "Editor"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Communities.UserCommunity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CommunityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("RoleId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCommunities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CommunityId = 1L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5641),
                            RoleId = (short)1,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            CommunityId = 2L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5643),
                            RoleId = (short)2,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            CommunityId = 3L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5645),
                            RoleId = (short)1,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            CommunityId = 4L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5647),
                            RoleId = (short)3,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5L,
                            CommunityId = 5L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5649),
                            RoleId = (short)2,
                            UserId = "5"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Events.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Format")
                        .HasColumnType("integer");

                    b.Property<string>("LiveStreamUrl")
                        .HasColumnType("text");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5113),
                            Description = "Explore the latest in technology and innovation.",
                            EndAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5112),
                            Format = 0,
                            LiveStreamUrl = "https://livestream.example.com/tech-conference",
                            LocationId = 1L,
                            StartAt = new DateTime(2024, 1, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5095),
                            Status = 0,
                            Title = "Tech Conference 2023"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5116),
                            Description = "Join us for a fitness extravaganza.",
                            EndAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5116),
                            Format = 3,
                            LocationId = 2L,
                            StartAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5115),
                            Status = 0,
                            Title = "Fitness Expo"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5119),
                            Description = "Discuss your favorite books with fellow bookworms.",
                            EndAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5119),
                            Format = 1,
                            LocationId = 3L,
                            StartAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5118),
                            Status = 0,
                            Title = "Book Club Meeting"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5122),
                            Description = "Discover and appreciate local artistic talent.",
                            EndAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5122),
                            Format = 0,
                            LocationId = 4L,
                            StartAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5121),
                            Status = 0,
                            Title = "Art Exhibition"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5125),
                            Description = "Join hands for a cleaner and greener community.",
                            EndAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5124),
                            Format = 0,
                            LocationId = 5L,
                            StartAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5124),
                            Status = 4,
                            Title = "Community Cleanup"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Events.EventAsset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventAssets");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5213),
                            EventId = 1L,
                            Image = "event-asset-image-1.jpg"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5215),
                            EventId = 2L,
                            Image = "event-asset-image-2.jpg"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5216),
                            EventId = 3L,
                            Image = "event-asset-image-3.jpg"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5218),
                            EventId = 4L,
                            Image = "event-asset-image-4.jpg"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5219),
                            EventId = 5L,
                            Image = "event-asset-image-5.jpg"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Events.EventRole", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("EventRoles");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5158),
                            Description = "Responsible for planning and managing the event.",
                            Name = "Organizer"
                        },
                        new
                        {
                            Id = (short)2,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5160),
                            Description = "Presenting talks or sessions during the event.",
                            Name = "Speaker"
                        },
                        new
                        {
                            Id = (short)3,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5161),
                            Description = "Attending the event without a specific role.",
                            Name = "Participant"
                        },
                        new
                        {
                            Id = (short)4,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5163),
                            Description = "Assisting with various tasks during the event.",
                            Name = "Volunteer"
                        },
                        new
                        {
                            Id = (short)5,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5164),
                            Description = "Supporting the event financially or with resources.",
                            Name = "Sponsor"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Events.EventSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SpeakerId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("EventSessions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5279),
                            Description = "An inspiring keynote to kick off the event.",
                            EndAt = new DateTime(2024, 1, 21, 12, 9, 46, 49, DateTimeKind.Utc).AddTicks(5277),
                            EventId = 1L,
                            Name = "Keynote Address",
                            SpeakerId = "1",
                            StartAt = new DateTime(2024, 1, 21, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5269)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5284),
                            Description = "A panel discussion on the future of technology.",
                            EndAt = new DateTime(2024, 2, 22, 12, 9, 46, 49, DateTimeKind.Utc).AddTicks(5283),
                            EventId = 2L,
                            Name = "Panel Discussion",
                            SpeakerId = "2",
                            StartAt = new DateTime(2024, 2, 22, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5281)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5288),
                            Description = "A discussion on the latest book club selection.",
                            EndAt = new DateTime(2024, 3, 23, 12, 9, 46, 49, DateTimeKind.Utc).AddTicks(5287),
                            EventId = 3L,
                            Name = "Book Club Discussion",
                            SpeakerId = "3",
                            StartAt = new DateTime(2024, 3, 23, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5286)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5292),
                            Description = "Hands-on workshop for aspiring artists.",
                            EndAt = new DateTime(2024, 4, 24, 13, 9, 46, 49, DateTimeKind.Utc).AddTicks(5291),
                            EventId = 4L,
                            Name = "Art Workshop",
                            SpeakerId = "4",
                            StartAt = new DateTime(2024, 4, 24, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5290)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5296),
                            Description = "Collaborative session to plan community initiatives.",
                            EndAt = new DateTime(2024, 5, 25, 12, 9, 46, 49, DateTimeKind.Utc).AddTicks(5294),
                            EventId = 5L,
                            Name = "Community Planning Session",
                            SpeakerId = "5",
                            StartAt = new DateTime(2024, 5, 25, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5293)
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.References.Language", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(4934),
                            Name = "English"
                        },
                        new
                        {
                            Id = (short)2,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(4938),
                            Name = "Uzbek"
                        },
                        new
                        {
                            Id = (short)3,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(4940),
                            Name = "French"
                        },
                        new
                        {
                            Id = (short)4,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(4941),
                            Name = "German"
                        },
                        new
                        {
                            Id = (short)5,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(4942),
                            Name = "Russian"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.References.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Latitude")
                        .HasColumnType("bigint");

                    b.Property<long>("Longitude")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "123 Main St",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5040),
                            Latitude = 789012L,
                            Longitude = 123456L
                        },
                        new
                        {
                            Id = 2L,
                            Address = "456 Oak Ave",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5043),
                            Latitude = 210987L,
                            Longitude = 654321L
                        },
                        new
                        {
                            Id = 3L,
                            Address = "789 Elm St",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5044),
                            Latitude = 333444L,
                            Longitude = 111222L
                        },
                        new
                        {
                            Id = 4L,
                            Address = "987 Pine Ave",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5046),
                            Latitude = 777888L,
                            Longitude = 555666L
                        },
                        new
                        {
                            Id = 5L,
                            Address = "654 Birch Ln",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(5047),
                            Latitude = 123789L,
                            Longitude = 999000L
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.References.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Region");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(3859),
                            Description = "Northern part of the country",
                            Name = "North Region"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(3861),
                            Description = "Southern part of the country",
                            Name = "South Region"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(3862),
                            Description = "Eastern part of the country",
                            Name = "East Region"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(3863),
                            Description = "Western part of the country",
                            Name = "West Region"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 49, DateTimeKind.Utc).AddTicks(3864),
                            Description = "Central part of the country",
                            Name = "Central Region"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Users.SpeakerDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("ExperienceYear")
                        .HasColumnType("smallint");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("SpeechImage")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SpeakerDetails");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Company = "Tech Innovators",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5280),
                            ExperienceYear = (short)5,
                            Position = "Senior Software Engineer",
                            SpeechImage = "john_doe_speech_image.jpg",
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            Company = "Health & Wellness Solutions",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5286),
                            ExperienceYear = (short)8,
                            Position = "Lead Nutritionist",
                            SpeechImage = "jane_smith_speech_image.jpg",
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            Company = "Artistic Creations",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5288),
                            ExperienceYear = (short)10,
                            Position = "Chief Creative Officer",
                            SpeechImage = "michael_johnson_speech_image.jpg",
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            Company = "GreenTech Solutions",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5290),
                            ExperienceYear = (short)7,
                            Position = "Environmental Scientist",
                            SpeechImage = "emily_anderson_speech_image.jpg",
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5L,
                            Company = "Innovative Designs",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5293),
                            ExperienceYear = (short)12,
                            Position = "Lead Architect",
                            SpeechImage = "william_taylor_speech_image.jpg",
                            UserId = "5"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fcb6a550-1a3c-4c22-91a9-7d09a969f3e5",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(4626),
                            DateOfBirth = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(4620),
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26cd9289-5dad-4c2b-bb90-71a41972024d",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e20846b-276d-4d42-80e2-b4c207fefa6a",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(4650),
                            DateOfBirth = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(4649),
                            Email = "jane.smith@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            PhoneNumber = "987654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a280f93b-c0c7-4827-87b7-4df2f51c0a65",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7083cd54-a23b-4be4-b16d-221d0f2c24d6",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(4846),
                            DateOfBirth = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(4845),
                            Email = "michael.johnson@example.com",
                            EmailConfirmed = false,
                            FirstName = "Michael",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            PhoneNumber = "555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6ab382c4-bd3e-4641-81f1-d27ae4e34668",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0ff7d494-fe3f-45ea-906c-0fc6b175d20f",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(4858),
                            DateOfBirth = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(4857),
                            Email = "emily.anderson@example.com",
                            EmailConfirmed = false,
                            FirstName = "Emily",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            PhoneNumber = "333333333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b2f9234a-3430-4697-ac51-eb107012f4a2",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6b79a20d-6c49-4f99-8812-13435d0aac48",
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(4869),
                            DateOfBirth = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(4868),
                            Email = "william.taylor@example.com",
                            EmailConfirmed = false,
                            FirstName = "William",
                            LastName = "Taylor",
                            LockoutEnabled = false,
                            PhoneNumber = "777777777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4bde7f9d-df57-4ced-b1ff-314d2840fa48",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Users.UserDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Resume")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserDatails");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "john-doe-image-url",
                            Resume = "John Doe's resume details",
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "jane-smith-image-url",
                            Resume = "Jane Smith's resume details",
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "michael-johnson-image-url",
                            Resume = "Michael Johnson's resume details",
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "emily-anderson-image-url",
                            Resume = "Emily Anderson's resume details",
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "william-taylor-image-url",
                            Resume = "William Taylor's resume details",
                            UserId = "5"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Users.UserEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<short>("RoleId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEvents");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5571),
                            EventId = 1L,
                            RoleId = (short)1,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5574),
                            EventId = 2L,
                            RoleId = (short)2,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5577),
                            EventId = 3L,
                            RoleId = (short)1,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5579),
                            EventId = 4L,
                            RoleId = (short)3,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5581),
                            EventId = 5L,
                            RoleId = (short)2,
                            UserId = "5"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Users.UserLanguage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("LanguageId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLanguages");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5505),
                            LanguageId = (short)1,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5507),
                            LanguageId = (short)2,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5509),
                            LanguageId = (short)3,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5511),
                            LanguageId = (short)4,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 12, 20, 11, 9, 46, 50, DateTimeKind.Utc).AddTicks(5513),
                            LanguageId = (short)5,
                            UserId = "5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Communities.Community", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.Communities.Community", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Communities.UserCommunity", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.Communities.Community", "Community")
                        .WithMany("UserCommunities")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDC.Server.Domain.Entities.Communities.CommunityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDC.Server.Domain.Entities.Users.User", "User")
                        .WithMany("UserCommunities")
                        .HasForeignKey("UserId");

                    b.Navigation("Community");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Events.Event", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.References.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Events.EventAsset", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Events.EventSession", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.Events.Event", "Event")
                        .WithMany("Sessions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDC.Server.Domain.Entities.Users.User", "Speaker")
                        .WithMany()
                        .HasForeignKey("SpeakerId");

                    b.Navigation("Event");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Users.SpeakerDetail", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Users.UserDetail", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.Users.User", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("MDC.Server.Domain.Entities.Users.UserDetail", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Users.UserEvent", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.Events.Event", "Event")
                        .WithMany("Users")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDC.Server.Domain.Entities.Events.EventRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDC.Server.Domain.Entities.Users.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId");

                    b.Navigation("Event");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Users.UserLanguage", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.References.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDC.Server.Domain.Entities.Users.User", "User")
                        .WithMany("Languages")
                        .HasForeignKey("UserId");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDC.Server.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Communities.Community", b =>
                {
                    b.Navigation("UserCommunities");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Events.Event", b =>
                {
                    b.Navigation("Sessions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Languages");

                    b.Navigation("UserCommunities");

                    b.Navigation("UserDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
