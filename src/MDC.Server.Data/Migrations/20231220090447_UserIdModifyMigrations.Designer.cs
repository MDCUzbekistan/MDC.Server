// <auto-generated />
using System;
using MDC.Server.Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MDC.Server.Data.Migrations
{
    [DbContext(typeof(MDCDbContext))]
    [Migration("20231220090447_UserIdModifyMigrations")]
    partial class UserIdModifyMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MDC.Server.Domain.Entities.Communities.Community", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Banner")
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Communities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Banner = "tech_banner.jpg",
                            Bio = "Explore the latest in tech trends.",
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6867),
                            Description = "A community for technology enthusiasts.",
                            Logo = "tech_logo.png",
                            Title = "Tech Enthusiasts"
                        },
                        new
                        {
                            Id = 2L,
                            Banner = "outdoor_banner.jpg",
                            Bio = "Connect with nature and fellow adventurers.",
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6869),
                            Description = "For those who love outdoor activities.",
                            Logo = "outdoor_logo.png",
                            Title = "Outdoor Adventures"
                        },
                        new
                        {
                            Id = 3L,
                            Banner = "books_banner.jpg",
                            Bio = "Discuss your favorite books and discover new ones.",
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6871),
                            Description = "A community for bookworms and literature enthusiasts.",
                            Logo = "books_logo.png",
                            Title = "Book Lovers Club"
                        },
                        new
                        {
                            Id = 4L,
                            Banner = "fitness_banner.jpg",
                            Bio = "Share workout tips and stay motivated.",
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6927),
                            Description = "For fitness enthusiasts and health-conscious individuals.",
                            Logo = "fitness_logo.png",
                            Title = "Fitness Fanatics"
                        },
                        new
                        {
                            Id = 5L,
                            Banner = "art_banner.jpg",
                            Bio = "Connect with fellow artists and creators.",
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6929),
                            Description = "Explore and share your artistic side.",
                            Logo = "art_logo.png",
                            Title = "Art and Creativity"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Communities.CommunityRole", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CommunityRoles");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6969),
                            Description = "Community administrator role.",
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = (short)2,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6971),
                            Description = "Standard community member role.",
                            Name = "Member"
                        },
                        new
                        {
                            Id = (short)3,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6972),
                            Description = "Community moderator role.",
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = (short)4,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6974),
                            Description = "Guest role for limited access.",
                            Name = "Guest"
                        },
                        new
                        {
                            Id = (short)5,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6975),
                            Description = "Community content editor role.",
                            Name = "Editor"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Communities.UserCommunity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CommunityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("RoleId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCommunities");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CommunityId = 1L,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6713),
                            RoleId = (short)1,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            CommunityId = 2L,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6715),
                            RoleId = (short)2,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            CommunityId = 3L,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6716),
                            RoleId = (short)1,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            CommunityId = 4L,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6718),
                            RoleId = (short)3,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5L,
                            CommunityId = 5L,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6719),
                            RoleId = (short)2,
                            UserId = "5"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Events.Event", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Format")
                        .HasColumnType("integer");

                    b.Property<string>("LiveStreamUrl")
                        .HasColumnType("text");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6183),
                            Description = "Explore the latest in technology and innovation.",
                            EndAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6182),
                            Format = 0,
                            LiveStreamUrl = "https://livestream.example.com/tech-conference",
                            LocationId = 1L,
                            StartAt = new DateTime(2024, 1, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6169),
                            Status = 0,
                            Title = "Tech Conference 2023"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6188),
                            Description = "Join us for a fitness extravaganza.",
                            EndAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6187),
                            Format = 3,
                            LocationId = 2L,
                            StartAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6186),
                            Status = 0,
                            Title = "Fitness Expo"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6191),
                            Description = "Discuss your favorite books with fellow bookworms.",
                            EndAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6190),
                            Format = 1,
                            LocationId = 3L,
                            StartAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6189),
                            Status = 0,
                            Title = "Book Club Meeting"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6195),
                            Description = "Discover and appreciate local artistic talent.",
                            EndAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6194),
                            Format = 0,
                            LocationId = 4L,
                            StartAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6193),
                            Status = 0,
                            Title = "Art Exhibition"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6198),
                            Description = "Join hands for a cleaner and greener community.",
                            EndAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6197),
                            Format = 0,
                            LocationId = 5L,
                            StartAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6197),
                            Status = 4,
                            Title = "Community Cleanup"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Events.EventAsset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventAssets");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Events.EventRole", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("EventRoles");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6244),
                            Description = "Responsible for planning and managing the event.",
                            Name = "Organizer"
                        },
                        new
                        {
                            Id = (short)2,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6247),
                            Description = "Presenting talks or sessions during the event.",
                            Name = "Speaker"
                        },
                        new
                        {
                            Id = (short)3,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6248),
                            Description = "Attending the event without a specific role.",
                            Name = "Participant"
                        },
                        new
                        {
                            Id = (short)4,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6250),
                            Description = "Assisting with various tasks during the event.",
                            Name = "Volunteer"
                        },
                        new
                        {
                            Id = (short)5,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6251),
                            Description = "Supporting the event financially or with resources.",
                            Name = "Sponsor"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Events.EventSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SpeakerId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("StartAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("SpeakerId");

                    b.ToTable("EventSessions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6388),
                            Description = "An inspiring keynote to kick off the event.",
                            EndAt = new DateTime(2024, 1, 21, 10, 4, 46, 648, DateTimeKind.Utc).AddTicks(6386),
                            EventId = 1L,
                            Name = "Keynote Address",
                            SpeakerId = "1",
                            StartAt = new DateTime(2024, 1, 21, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6373)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6392),
                            Description = "A panel discussion on the future of technology.",
                            EndAt = new DateTime(2024, 2, 22, 10, 4, 46, 648, DateTimeKind.Utc).AddTicks(6390),
                            EventId = 2L,
                            Name = "Panel Discussion",
                            SpeakerId = "2",
                            StartAt = new DateTime(2024, 2, 22, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6389)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6396),
                            Description = "A discussion on the latest book club selection.",
                            EndAt = new DateTime(2024, 3, 23, 10, 4, 46, 648, DateTimeKind.Utc).AddTicks(6394),
                            EventId = 3L,
                            Name = "Book Club Discussion",
                            SpeakerId = "3",
                            StartAt = new DateTime(2024, 3, 23, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6393)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6399),
                            Description = "Hands-on workshop for aspiring artists.",
                            EndAt = new DateTime(2024, 4, 24, 11, 4, 46, 648, DateTimeKind.Utc).AddTicks(6398),
                            EventId = 4L,
                            Name = "Art Workshop",
                            SpeakerId = "4",
                            StartAt = new DateTime(2024, 4, 24, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6397)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6403),
                            Description = "Collaborative session to plan community initiatives.",
                            EndAt = new DateTime(2024, 5, 25, 10, 4, 46, 648, DateTimeKind.Utc).AddTicks(6402),
                            EventId = 5L,
                            Name = "Community Planning Session",
                            SpeakerId = "5",
                            StartAt = new DateTime(2024, 5, 25, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6401)
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.References.Language", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(7018),
                            Name = "English"
                        },
                        new
                        {
                            Id = (short)2,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(7020),
                            Name = "Uzbek"
                        },
                        new
                        {
                            Id = (short)3,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(7022),
                            Name = "French"
                        },
                        new
                        {
                            Id = (short)4,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(7023),
                            Name = "German"
                        },
                        new
                        {
                            Id = (short)5,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(7025),
                            Name = "Russian"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.References.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("Latitude")
                        .HasColumnType("bigint");

                    b.Property<long>("Longitude")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "123 Main St",
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(5819),
                            Latitude = 789012L,
                            Longitude = 123456L
                        },
                        new
                        {
                            Id = 2L,
                            Address = "456 Oak Ave",
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(5825),
                            Latitude = 210987L,
                            Longitude = 654321L
                        },
                        new
                        {
                            Id = 3L,
                            Address = "789 Elm St",
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(5827),
                            Latitude = 333444L,
                            Longitude = 111222L
                        },
                        new
                        {
                            Id = 4L,
                            Address = "987 Pine Ave",
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(5828),
                            Latitude = 777888L,
                            Longitude = 555666L
                        },
                        new
                        {
                            Id = 5L,
                            Address = "654 Birch Ln",
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(5830),
                            Latitude = 123789L,
                            Longitude = 999000L
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.References.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Region");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 649, DateTimeKind.Utc).AddTicks(8278),
                            Description = "Northern part of the country",
                            Name = "North Region"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 649, DateTimeKind.Utc).AddTicks(8282),
                            Description = "Southern part of the country",
                            Name = "South Region"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 649, DateTimeKind.Utc).AddTicks(8283),
                            Description = "Eastern part of the country",
                            Name = "East Region"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 649, DateTimeKind.Utc).AddTicks(8284),
                            Description = "Western part of the country",
                            Name = "West Region"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 649, DateTimeKind.Utc).AddTicks(8285),
                            Description = "Central part of the country",
                            Name = "Central Region"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Users.SpeakerDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("ExperienceYear")
                        .HasColumnType("smallint");

                    b.Property<string>("Position")
                        .HasColumnType("text");

                    b.Property<string>("SpeechImage")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SpeakerDetails");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Company = "Tech Innovators",
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6809),
                            ExperienceYear = (short)5,
                            Position = "Senior Software Engineer",
                            SpeechImage = "john_doe_speech_image.jpg",
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            Company = "Health & Wellness Solutions",
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6812),
                            ExperienceYear = (short)8,
                            Position = "Lead Nutritionist",
                            SpeechImage = "jane_smith_speech_image.jpg",
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            Company = "Artistic Creations",
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6814),
                            ExperienceYear = (short)10,
                            Position = "Chief Creative Officer",
                            SpeechImage = "michael_johnson_speech_image.jpg",
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            Company = "GreenTech Solutions",
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6815),
                            ExperienceYear = (short)7,
                            Position = "Environmental Scientist",
                            SpeechImage = "emily_anderson_speech_image.jpg",
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5L,
                            Company = "Innovative Designs",
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6817),
                            ExperienceYear = (short)12,
                            Position = "Lead Architect",
                            SpeechImage = "william_taylor_speech_image.jpg",
                            UserId = "5"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "30d10cb7-0bba-4ab1-9cbb-628095904929",
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6553),
                            DateOfBirth = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6551),
                            Email = "john.doe@example.com",
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            PhoneNumber = "123456789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3998e7b9-5810-4fe3-8537-fdf6cc251f6e",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09b1b4b6-f05c-411b-9478-ae6fb5e56e2e",
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6562),
                            DateOfBirth = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6561),
                            Email = "jane.smith@example.com",
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            PhoneNumber = "987654321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc9b09b5-1c55-45eb-a981-5fc16eb98741",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "64acbe06-7676-486f-80a2-9bd4601d7385",
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6589),
                            DateOfBirth = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6589),
                            Email = "michael.johnson@example.com",
                            EmailConfirmed = false,
                            FirstName = "Michael",
                            LastName = "Johnson",
                            LockoutEnabled = false,
                            PhoneNumber = "555555555",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7280ad3a-d542-41be-a775-ca3cc0ad0f5c",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32d4d5d3-650d-46ac-ac8b-568ca308cbb8",
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6596),
                            DateOfBirth = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6595),
                            Email = "emily.anderson@example.com",
                            EmailConfirmed = false,
                            FirstName = "Emily",
                            LastName = "Anderson",
                            LockoutEnabled = false,
                            PhoneNumber = "333333333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "36389d01-1b8b-4ac8-8e59-783ee29c5716",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77f700dd-84d3-4b9a-ae7e-894ae71a2221",
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6607),
                            DateOfBirth = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6606),
                            Email = "william.taylor@example.com",
                            EmailConfirmed = false,
                            FirstName = "William",
                            LastName = "Taylor",
                            LockoutEnabled = false,
                            PhoneNumber = "777777777",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f560ae3b-99e6-486f-a285-50b00e791117",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Users.UserDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Resume")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserDatails");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "john-doe-image-url",
                            Resume = "John Doe's resume details",
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "jane-smith-image-url",
                            Resume = "Jane Smith's resume details",
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "michael-johnson-image-url",
                            Resume = "Michael Johnson's resume details",
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "emily-anderson-image-url",
                            Resume = "Emily Anderson's resume details",
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "william-taylor-image-url",
                            Resume = "William Taylor's resume details",
                            UserId = "5"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Users.UserEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<short>("RoleId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEvents");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6761),
                            EventId = 1L,
                            RoleId = (short)1,
                            UserId = "1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6763),
                            EventId = 2L,
                            RoleId = (short)2,
                            UserId = "2"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6764),
                            EventId = 3L,
                            RoleId = (short)1,
                            UserId = "3"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6766),
                            EventId = 4L,
                            RoleId = (short)3,
                            UserId = "4"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2023, 12, 20, 9, 4, 46, 648, DateTimeKind.Utc).AddTicks(6767),
                            EventId = 5L,
                            RoleId = (short)2,
                            UserId = "5"
                        });
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Users.UserLanguage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("LanguageId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLanguages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Communities.Community", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.Communities.Community", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Communities.UserCommunity", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.Communities.Community", "Community")
                        .WithMany("UserCommunities")
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDC.Server.Domain.Entities.Communities.CommunityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDC.Server.Domain.Entities.Users.User", "User")
                        .WithMany("UserCommunities")
                        .HasForeignKey("UserId");

                    b.Navigation("Community");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Events.Event", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.References.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Events.EventAsset", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.Events.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Events.EventSession", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.Events.Event", "Event")
                        .WithMany("Sessions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDC.Server.Domain.Entities.Users.User", "Speaker")
                        .WithMany()
                        .HasForeignKey("SpeakerId");

                    b.Navigation("Event");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Users.SpeakerDetail", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Users.UserDetail", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.Users.User", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("MDC.Server.Domain.Entities.Users.UserDetail", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Users.UserEvent", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.Events.Event", "Event")
                        .WithMany("Users")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDC.Server.Domain.Entities.Events.EventRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDC.Server.Domain.Entities.Users.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId");

                    b.Navigation("Event");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Users.UserLanguage", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.References.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDC.Server.Domain.Entities.Users.User", "User")
                        .WithMany("Languages")
                        .HasForeignKey("UserId");

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDC.Server.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MDC.Server.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Communities.Community", b =>
                {
                    b.Navigation("UserCommunities");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Events.Event", b =>
                {
                    b.Navigation("Sessions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MDC.Server.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Languages");

                    b.Navigation("UserCommunities");

                    b.Navigation("UserDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
